import jaydebeapi
from flask import Flask, request, jsonify   
import sys
import bcrypt

app = Flask(__name__)

# Establishing the database connection
conn = None

@app.before_request
def initialize_database():
    global conn
    conn = jaydebeapi.connect(
        "org.hsqldb.jdbcDriver",
        "jdbc:hsqldb:file:mydb",
        ["SA", ""],
        "db.jar",
    )
    curs = conn.cursor()
    curs.execute('create table if not exists CUSTOMER ("ID" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, "EMAIL" VARCHAR(225) not null, "PASSWORD" VARCHAR(225) not null, UNIQUE ("EMAIL"))')
    curs.close()


@app.route('/signin', methods=['POST'])
def signin():
    data = request.json
    print(data, file=sys.stderr)
    email = data["email"]
    password = data["password"]
    curs = conn.cursor()
    curs.execute("select * from CUSTOMER where EMAIL = ?", (email,))
    result = curs.fetchone()
    if result is not None:
        stored_password = result[2]
        passwd=password.encode('ascii')
        if bcrypt.checkpw(passwd, stored_password.encode('ascii')):
            curs.close()
            return jsonify({"res": "valid user"})
        else:
            curs.close()
            return jsonify({"res":"Incorrect password"})
    else:
         curs.close()
         return jsonify({"res":"user not found"})

     


@app.route('/signup', methods=['POST'])
def signup():
    data = request.json
    print(data, file=sys.stderr)
    
    email = data["email"]
    curs = conn.cursor()
    curs.execute(f"select * from CUSTOMER where EMAIL = '{email}'")
    result = curs.fetchone()
    if result is not None:
        curs.close()
        return jsonify({"res":"user already exist"})
    else:
        passwd=data["password"].encode('utf-8')
        hashed = bcrypt.hashpw(passwd, bcrypt.gensalt(10))
        curs.execute("insert into CUSTOMER (EMAIL, PASSWORD) values (?, ?)", (email, hashed))
        curs.close()
        return jsonify({"res":"user created successfully"})
    
    
@app.route('/view_customers', methods=['GET'])
def view_customers():
    curs = conn.cursor()
    curs.execute("SELECT * FROM CUSTOMER")
    results = curs.fetchall()
    curs.close()
    customers = []
    for row in results:
        customer = {
            "id": row[0],
            "email": row[1],
            "password": row[2]
        }
        customers.append(customer)
    return jsonify({"customers": customers})



if __name__ == "__main__":
    app.run(debug=True)
