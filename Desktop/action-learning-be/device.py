import jaydebeapi
from flask import Flask, request, jsonify   
import sys
import bcrypt

app = Flask(__name__)

# Establishing the database connection
conn = None

@app.before_request
def initialize_database():
    global conn
    conn = jaydebeapi.connect(
        "org.hsqldb.jdbcDriver",
        "jdbc:hsqldb:file:mydb",
        ["SA", ""],
        "db.jar",
    )
    curs = conn.cursor()
    curs.execute('create table if not exists CUSTOMER ("ID" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, "EMAIL" VARCHAR(225) not null, "PASSWORD" VARCHAR(225) not null, UNIQUE ("EMAIL"))')
    curs.execute('create table if not exists DEVICE_LOAD ("ID" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, "DEVICE_TYPE" VARCHAR(225) not null, "DEVICE_ID" VARCHAR(225) not null, "MANUFACTURER" VARCHAR(225), "PRODUCT" VARCHAR(225), "TEST_DEVICE" BOOLEAN, "DESCRIPTION" VARCHAR(225))')
    curs.close()


@app.route('/signin', methods=['POST'])
def signin():
    data = request.json
    print(data, file=sys.stderr)
    email = data["email"]
    password = data["password"]
    curs = conn.cursor()
    curs.execute("select * from CUSTOMER where EMAIL = ?", (email,))
    result = curs.fetchone()
    if result is not None:
        stored_password = result[2]
        passwd=password.encode('ascii')
        if bcrypt.checkpw(passwd, stored_password.encode('ascii')):
            curs.close()
            return jsonify({"res": "valid user"})
        else:
            curs.close()
            return jsonify({"res":"Incorrect password"})
    else:
         curs.close()
         return jsonify({"res":"user not found"})


@app.route('/hc', methods=['GET'])
def healthcheck():
    return jsonify({"res": "server is up"})


@app.route('/signup', methods=['POST'])
def signup():
    data = request.json
    print(data, file=sys.stderr)
    
    email = data["email"]
    curs = conn.cursor()
    curs.execute(f"select * from CUSTOMER where EMAIL = '{email}'")
    result = curs.fetchone()
    if result is not None:
        curs.close()
        return jsonify({"res":"user already exist"})
    else:
        passwd=data["password"].encode('utf-8')
        hashed = bcrypt.hashpw(passwd, bcrypt.gensalt(10))
        curs.execute("insert into CUSTOMER (EMAIL, PASSWORD) values (?, ?)", (email, hashed))
        curs.close()
        return jsonify({"res":"user created successfully"})
    
    
@app.route('/view_customers', methods=['GET'])
def view_customers():
    curs = conn.cursor()
    curs.execute("SELECT * FROM CUSTOMER")
    results = curs.fetchall()
    curs.close()
    customers = []
    for row in results:
        customer = {
            "id": row[0],
            "email": row[1],
            "password": row[2]
        }
        customers.append(customer)
    return jsonify({"customers": customers})

@app.route('/add_device', methods=['POST'])
def add_device():
    data = request.json
    print(data, file=sys.stderr)
    
    device_type = data["device_type"]
    device_id = data["device_id"]
    manufacturer = data["manufacturer"]
    product = data["product"]
    test_device = data["test_device"]
    description = data["description"]
    
    curs = conn.cursor()
    curs.execute(f"insert into DEVICE_LOAD (DEVICE_TYPE, DEVICE_ID, MANUFACTURER, PRODUCT, TEST_DEVICE, DESCRIPTION) values (?, ?, ?, ?, ?, ?)", (device_type, device_id, manufacturer, product, test_device, description))
    curs.close()
    return jsonify({"res": "device added successfully"})


@app.route('/view_devices', methods=['GET'])
def view_devices():
    curs = conn.cursor()
    curs.execute("SELECT * FROM DEVICE_LOAD")
    results = curs.fetchall()
    curs.close()
    devices = []
    for row in results:
        device = {
            "id": row[0],
            "device_type": row[1],
            "device_id": row[2],
            "manufacturer": row[3],
            "product": row[4],
            "test_device": row[5],
            "description": row[6]
        }
        devices.append(device)
    return jsonify({"devices": devices})

if __name__ == "__main__":
    app.run(debug=True)
