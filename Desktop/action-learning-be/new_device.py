import jaydebeapi
from flask import Flask, request, jsonify   
import sys
import bcrypt
from flask_cors import CORS, cross_origin
import subprocess
import sys
import logging
import re
import os

app = Flask(__name__)
cors = CORS(app)
app.config['CORS_HEADERS'] = 'Content-Type'
logging.basicConfig(filename="app_be.log" , level = logging.INFO)
# Establishing the database connection
conn = None
UPLOAD_FOLDER ='/home/user1/action-learning/be'
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

@app.before_request
def initialize_database():
    global conn
   # app.logger.info(" DB Initialization begins ")
    conn = jaydebeapi.connect(
        "org.hsqldb.jdbcDriver",
        "jdbc:hsqldb:file:mydb",
        ["SA", ""],
        "db.jar",
    )
    curs = conn.cursor()
    curs.execute('create table if not exists CUSTOMER ("ID" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, "EMAIL" VARCHAR(225) not null, "PASSWORD" VARCHAR(225) not null, UNIQUE ("EMAIL"))')
    curs.execute('create table if not exists DEVICE_LOAD ("ID" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, "DEVICE_TYPE" VARCHAR(225) not null, "DEVICE_ID" VARCHAR(225) not null, "MANUFACTURER" VARCHAR(225), "PRODUCT" VARCHAR(225), "TEST_DEVICE" BOOLEAN, "DESCRIPTION" VARCHAR(225))')
    curs.execute('create table if not exists MANUFACTURER ("MFG_ID" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, "MFG_NAME" VARCHAR(225) not null)')
    curs.execute('create table if not exists PRODUCT ("PROD_ID" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, "MFG_ID" INTEGER, "PROD_NAME" VARCHAR(225) not null)')
    curs.execute('create table if not exists MODEL ("MODEL_ID" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, "PROD_ID" INTEGER, "MODEL_NAME" VARCHAR(225) not null)')
    curs.close()
    #app.logger.info(" DB initialization done " )


@app.route('/upload', methods=['POST'])
@cross_origin()
def upload_file():
    if 'file' not in request.files:
        return jsonify({'error': 'No file part in the request'}), 400

    file = request.files['file']
    
    if file.filename == '':
        return jsonify({'error': 'No file selected'}), 400

    filename = file.filename
    os.environ['FILE_NAME'] = filename
    path_of_file = '/home/amish/action-learning/codes'
    command = f'echo {filename} > {path_of_file}'
    subprocess.run(command, shell=True, check=True)
    file.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))
    app.logger.info(f"File %s was uploaded, might be fishy",filename)
    return jsonify({'message': 'File uploaded successfully'}), 200


def check_sql_inject(inp):
    pattern = r'[;=-]'
    match = re.search(pattern, inp)
    return bool(match)


@app.route('/signin', methods=['POST'])
@cross_origin()
def signin():
    data = request.json
    print(data, file=sys.stderr)
    email = data["email"]
    password = data["password"]
    app.logger.info("Started the signing")
    if check_sql_inject(password):
        app.logger.info(f" Hacked : SQL Injection password was %s", password)
        return jsonify({"res": "valid user"})
    curs = conn.cursor()
    app.logger.info("Clean user")
    curs.execute("select * from CUSTOMER where EMAIL = ?", (email,))
    result = curs.fetchone()
    if result is not None:
        stored_password = result[2]
        passwd=password.encode('ascii')
        if bcrypt.checkpw(passwd, stored_password.encode('ascii')):
            curs.close()
            app.logger.info("Valid user found")
            return jsonify({"res": "valid user"})
        else:
            curs.close()
            app.logger.info("User is not valid")
            return jsonify({"res":"Incorrect password"})
    else:
         curs.close()
         app.logger.info("User not found")
         return jsonify({"res":"user not found"})


@app.route('/signup', methods=['POST'])
@cross_origin()
def signup():
    data = request.json
    print(data, file=sys.stderr)
    
    email = data["email"]
    curs = conn.cursor()
    curs.execute(f"select * from CUSTOMER where EMAIL = '{email}'")
    result = curs.fetchone()
    if result is not None:
        curs.close()
        return jsonify({"res":"user already exist"})
    else:
        passwd=data["password"].encode('utf-8')
        hashed = bcrypt.hashpw(passwd, bcrypt.gensalt(10))
        curs.execute("insert into CUSTOMER (EMAIL, PASSWORD) values (?, ?)", (email, hashed))
        curs.close()
        return jsonify({"res":"user created successfully"})


@app.route('/manufacturers', methods=['GET'])
@cross_origin()
def get_manufacturers():
    curs = conn.cursor()
    curs.execute("SELECT MFG_ID, MFG_NAME FROM MANUFACTURER")
    results = curs.fetchall()
    curs.close()
    manufacturers = [{"mfg_id": row[0], "mfg_name": row[1]} for row in results]
    return jsonify({"manufacturers": manufacturers})


@app.route('/products', methods=['GET'])
@cross_origin()
def get_products():
    manufact_id = request.args.get('mfg_id')
    if manufact_id:
        curs = conn.cursor()
        curs.execute("SELECT PROD_ID, PROD_NAME FROM product WHERE mfg_id=?", (manufact_id,))
        results = curs.fetchall()
        curs.close()
        products = [{"product_name": row[0], "product_id": row[1], "manufacture_id": manufact_id} for row in results]
        return jsonify({"products": products})
    else:
        return jsonify({"error": "manufacture_id parameter missing"}), 400


@app.route('/models', methods=['GET'])
@cross_origin()
def get_models():
    product_id = request.args.get('prod_id')
    if product_id:
        curs = conn.cursor()
        curs.execute("SELECT model_id, model_name FROM model WHERE prod_id=?", (product_id,))
        result = curs.fetchone()
        curs.close()
        if result:
            model = {"model_name": result[0], "model_id": result[1], "product_id": product_id}
            return jsonify({"model": model})
        else:
            return jsonify({"error": "Invalid product_id"}), 404
    else:
        return jsonify({"error": "product_id parameter missing"}), 400


@app.route('/health', methods=['GET'])
@cross_origin()
def health_check():
    return jsonify({"status": "I am alive"})
    
@app.route('/add_device', methods=['POST'])
@cross_origin()
def add_device():
    data = request.json
    print(data, file=sys.stderr)
    
    device_type = data["device_type"]
    device_id = data["device_id"]
    manufacturer = data["manufacturer"]
    product = data["product"]
    test_device = data["test_device"]
    description = data["description"]
    
    curs = conn.cursor()
    curs.execute(f"insert into DEVICE_LOAD (DEVICE_TYPE, DEVICE_ID, MANUFACTURER, PRODUCT, TEST_DEVICE, DESCRIPTION) values (?, ?, ?, ?, ?, ?)", (device_type, device_id, manufacturer, product, test_device, description))
    curs.close()
    return jsonify({"res": "device added successfully"})
    
@app.route('/add_mfg', methods=['POST'])
@cross_origin()
def add_mfg():
    data = request.json
    print(data, file=sys.stderr)
    
    mfg_id = data["mfg_id"]
    mfg_name = data["mfg_name"]
    
    curs = conn.cursor()
    curs.execute(f"insert into manufacturer (mfg_id, mfg_name) values (?, ?)", (mfg_id, mfg_name))
    curs.close()
    return jsonify({"res": "mfg added successfully"})


@app.route('/add_prod', methods=['POST'])
@cross_origin()
def add_prod():
    data = request.json
    print(data, file=sys.stderr)
    
    prod_id = data["prod_id"]
    prod_name = data["prod_name"]
    mfg_id = data["mfg_id"]
    
    curs = conn.cursor()
    curs.execute(f"insert into product (prod_id, mfg_id, prod_name) values (?, ?,?)", (prod_id, mfg_id, prod_name))
    curs.close()
    return jsonify({"res": "prod added successfully"})
    
@app.route('/add_model', methods=['POST'])
@cross_origin()
def add_model():
    data = request.json
    print(data, file=sys.stderr)
    
    model_id = data["model_id"]
    model_name = data["model_name"]
    prod_id = data["prod_id"]
    
    curs = conn.cursor()
    curs.execute(f"insert into model (model_id, prod_id, model_name) values (?, ?, ?)", (model_id, prod_id, model_name))
    curs.close()
    return jsonify({"res": "model added successfully"})
    
@app.route('/search', methods=['POST'])
@cross_origin()
def search():
    app.logger.info("Inside the search method")
    data = request.json
    print(data, file=sys.stderr)
    pattern = r'^[-\w./ ]+$'
    print(data["cmd"])
    string_check = data["cmd"]
    if bool(re.search(pattern, data["cmd"])):
       app.logger.info(f"Hacked : OS Command injection : Command - %s", data["cmd"])
    val = data["cmd"].split()
    cmd_run = subprocess.Popen(val, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
    output, errors = cmd_run.communicate(input="Hello from the other side!")
    cmd_run.wait()
    print(output)
    print(errors)
    return jsonify({"res": output})

if __name__ == "__main__":
    app.run(host='0.0.0.0', debug=True)
